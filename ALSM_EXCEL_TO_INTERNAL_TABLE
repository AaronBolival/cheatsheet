"Excel Data transfered to t_data_convert=================================
Row  ROW   COL   VALUE
======================
1    0001  0001  101
2    0001  0002  1
3    0001  0003  2000
4    0002  0001  101
5    0002  0002  2
6    0002  0003  1000
7    0003  0001  101
8    0003  0002  3
9    0003  0003  2000
"=========================================================================

TYPES: BEGIN OF ty_input,
        bwart TYPE mseg-bwart,"movement type x
        vbeln TYPE likp-vbeln,"delivery number x
        matnr TYPE mara-matnr,"material x
      END OF ty_input.


CONSTANTS: c_1   TYPE i VALUE 1, "start of header
           c_2   TYPE i VALUE 2, "start of data
           c_10  TYPE i VALUE 3, "number of columns
           c_10k TYPE i VALUE 10000. "number of rows


DATA: t_data TYPE filetable,
      g_rc      TYPE i,
      g_current TYPE i,
      g_docnum  TYPE likp-vbeln,
      t_data_convert  TYPE STANDARD TABLE OF alsmex_tabline,
      gt_input_data TYPE STANDARD TABLE OF ty_input,
      gs_input_data LIKE LINE OF gt_input_data.


PARAMETERS p_file TYPE localfile. "input file

AT SELECTION-SCREEN ON VALUE-REQUEST FOR p_file.

CALL METHOD cl_gui_frontend_services=>file_open_dialog
*  exporting
*    file_filter             = |csv (*.csv)\|*.csv\|{ cl_gui_frontend_services=>filetype_all } |
  CHANGING
    file_table              = t_data
    rc                      = g_rc.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

READ TABLE t_data ASSIGNING FIELD-SYMBOL(<fs_data>) INDEX 1.
  IF sy-subrc EQ 0.
    p_file = <fs_data>-filename.
  ENDIF.

START-OF-SELECTION.
CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
  EXPORTING
    filename                      = p_file
    i_begin_col                   = C_1
    i_begin_row                   = c_2
    i_end_col                     = c_10
    i_end_row                     = c_10k
  TABLES
    intern                        = t_data_convert.
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

LOOP AT t_data_convert ASSIGNING FIELD-SYMBOL(<fs_convert>).
    IF g_current IS INITIAL.
*      place value to g_current for current row being read
      g_current = <fs_convert>-row.
    ELSEIF g_current NE <fs_convert>-row.
*   append previous values
      APPEND gs_input_data TO gt_input_data.
*      place new value of new row being read
      g_current = <fs_convert>-row.
    ENDIF.

    IF <fs_convert>-col EQ 1.
      "place movement type
      gs_input_data-bwart = <fs_convert>-value.
    ENDIF.

    IF <fs_convert>-col EQ 2.
      "Delivery document
      gs_input_data-vbeln = <fs_convert>-value.
    ENDIF.

    IF <fs_convert>-col EQ 3.
      "Material
      gs_input_data-matnr = <fs_convert>-value.
    ENDIF.


clear <fs_convert>-value.
ENDLOOP.

"append final value
APPEND gs_input_data TO gt_input_data.
CLEAR gs_input_data.

"OR
"======================================================================================================================================================================
  CALL FUNCTION 'ALSM_EXCEL_TO_INTERNAL_TABLE'
    EXPORTING
      filename                = file1
      i_begin_col             = 1
      i_begin_row             = 2
      i_end_col               = 23
      i_end_row               = 65000
*     VALUESHEET              = 1
    TABLES
      intern                  = it_data
    EXCEPTIONS
      inconsistent_parameters = 1
      upload_ole              = 2
      OTHERS                  = 3.

  IF sy-subrc <> 0.
    MESSAGE ID sy-msgid TYPE sy-msgty NUMBER sy-msgno
       WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
  ENDIF.

  IF NOT it_data[] IS INITIAL.

    SORT it_data BY row col.

    LOOP AT it_data.
      CASE it_data-col.
        WHEN '0001'.
          rec1-blart = it_data-value.
        WHEN '0002'.
          WRITE it_data-value TO rec1-bldat.
*          PERFORM date_format_local USING it_data-value
*                                 CHANGING rec1-bldat.
        WHEN '0003'.
          rec1-xblnr = it_data-value.
        WHEN '0004'.
          rec1-bktxt = it_data-value.
        WHEN '0005'.
          rec1-waers = it_data-value.
        WHEN '0006'.
          rec1-kursf = it_data-value.
        WHEN '0007'.
          rec1-bschl = it_data-value.
        WHEN '0008'.
          rec1-hkont = it_data-value.
        WHEN '0009'.
          rec1-newum = it_data-value.
        WHEN '0010'.
          rec1-kostl = it_data-value.
        WHEN '0011'.
          rec1-prctr = it_data-value.
        WHEN '0012'.
          rec1-aufnr = it_data-value.
        WHEN '0013'.
          rec1-wrbtr = it_data-value.
        WHEN '0014'.
          rec1-dmbtr = it_data-value.
        WHEN '0015'.
          rec1-sgtxt = it_data-value.
        WHEN '0016'.
          rec1-mwskz = it_data-value.
        WHEN '0017'.
          rec1-zterm = it_data-value.
        WHEN '0018'.
          rec1-zuonr = it_data-value.
        WHEN '0019'.
          rec1-xmwst = it_data-value.
        WHEN '0020'.
          WRITE it_data-value TO rec1-zfbdt.
*          PERFORM date_format_local USING it_data-value
*                                 CHANGING rec1-zfbdt.
        WHEN '0021'.
          rec1-qsshb = it_data-value.
        WHEN '0022'.
          rec1-qsfbt = it_data-value.
        WHEN '0023'.
          rec1-qsskz = it_data-value.
      ENDCASE.

      AT END OF row.
        rec1-bukrs = g_comp_code.                   "HPECC-20160322
        APPEND rec1.
        CLEAR rec1.
      ENDAT.

    ENDLOOP.
*
  ENDIF.
